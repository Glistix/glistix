name: release-verify-binary-architecture

on:
  workflow_dispatch:
  push:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc
        toolchain: [stable]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use-cross: true
          # macos>=14 runs exclusively on aarch64 and will thus fail to execute properly for x64
          - os: macos-13
            target: x86_64-apple-darwin
            use-cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            use-cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            use-cross: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}

      - name: Handle Rust dependencies caching
        uses: Swatinem/rust-cache@v2
        with:
          key: v1-${{ matrix.target }}

      - name: Build release binary
        uses: clechasseur/rs-cargo@v2
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.use-cross }}

      - name: Verify binary architecture
        shell: bash
        run: |
          set -xeuo pipefail

          BINARY_PATH="target/${{ matrix.target }}/release/gleam"
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
              BINARY_PATH="${BINARY_PATH}.exe"
          fi

          # Parse target architecture
          case "${{ matrix.target }}" in
              "x86_64"*) TARGET_ARCHITECTURE="x86_64" ;;
              "aarch64"*) TARGET_ARCHITECTURE="aarch64" ;;
              *) echo "Unknown target architecture '${{ matrix.target }}'"; exit 1 ;;
          esac

          # Parse binary architecture and map expected binary architecture for target OS
          case "${{ matrix.target }}" in
              *"darwin"*)
                  # Parse binary architecture
                  file_output=$(file -b "${BINARY_PATH}")
                  BINARY_ARCHITECTURE=$(echo "${file_output}" | grep -o "x86_64\|arm64" || echo "")
                  # Map expected binary architecture
                  case "${TARGET_ARCHITECTURE}" in
                      "x86_64") EXPECTED_BINARY_ARCHITECTURE="x86_64" ;;
                      "aarch64") EXPECTED_BINARY_ARCHITECTURE="arm64" ;;
                      *) echo "Unknown Darwin architecture: '${TARGET_ARCHITECTURE}'"; exit 1 ;;
                  esac
                  ;;
              *"linux"*)
                  # Parse binary architecture
                  file_output=$(file -b "${BINARY_PATH}")
                  BINARY_ARCHITECTURE=$(echo "${file_output}" | grep -o "x86-64\|aarch64" | head -n1 || echo "")
                  # Map expected binary architecture
                  case "${TARGET_ARCHITECTURE}" in
                      "x86_64") EXPECTED_BINARY_ARCHITECTURE="x86-64" ;;
                      "aarch64") EXPECTED_BINARY_ARCHITECTURE="aarch64" ;;
                      *) echo "Unknown Linux architecture: '${TARGET_ARCHITECTURE}'"; exit 1 ;;
                  esac
                  ;;
              *"windows"*)
                  # Parse binary architecture
                  pe_header_output=$(powershell -Command "
                    \$bytes = [System.IO.File]::ReadAllBytes('${BINARY_PATH}');
                    \$header_offset = [System.BitConverter]::ToInt32(\$bytes, 0x3c);
                    \$machine_type = [System.BitConverter]::ToUInt16(\$bytes, \$header_offset + 4);
                    \$machine_type
                  " 2>&1) || echo "PE header extraction failed"
                  # Map binary architecture
                  case "${pe_header_output}" in
                      *"34404"*) BINARY_ARCHITECTURE="X64" ;;   # 0x8664
                      *"43620"*) BINARY_ARCHITECTURE="Arm64" ;; # 0xAA64
                      *) echo "Unknown PE machine type: '${pe_header_output}'"; exit 1 ;;
                  esac
                  # Map expected binary architecture
                  case "${TARGET_ARCHITECTURE}" in
                      "x86_64") EXPECTED_BINARY_ARCHITECTURE="X64" ;;
                      "aarch64") EXPECTED_BINARY_ARCHITECTURE="Arm64" ;;
                      *) echo "Unknown Windows architecture: '${TARGET_ARCHITECTURE}'"; exit 1 ;;
                  esac
                  ;;
              *)
                  echo "Unknown target OS: '${{ matrix.target }}'"
                  exit 1
                  ;;
          esac

          # Verify binary architecture
          if [[ "${BINARY_ARCHITECTURE}" != "${EXPECTED_BINARY_ARCHITECTURE}" ]]; then
              echo "Architecture mismatch for '${{ matrix.target }}'"
              echo "Expected: '${EXPECTED_BINARY_ARCHITECTURE}'"
              echo "Got: '${BINARY_ARCHITECTURE}'"
              exit 1
          fi
