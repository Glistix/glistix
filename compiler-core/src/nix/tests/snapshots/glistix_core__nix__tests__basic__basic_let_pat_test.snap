---
source: compiler-core/src/nix/tests/basic.rs
expression: "\npub type Test {\n  A\n  B(Int)\n  C(a: Int, b: Float)\n}\n\npub type Simple {\n  Simple\n}\npub type Simple2 {\n  Simple2(Int)\n}\npub type Simple3 {\n  Simple3(inherit: Bool, x: Float)\n}\n\npub fn pat_test() {\n  let Nil = Nil\n  let x = Simple\n  let Simple = x\n  let Simple = Simple\n  let _ = Simple2(5)\n  let _ignored = Simple2(5)\n  let Simple2(a) = Simple2(5)\n  let Simple3(a, b) = Simple3(True, 5.0)\n\n  #(a, b)\n}\n\npub fn pat_assert_test() {\n  let assert True = True\n  let assert False = True\n  let assert A = A\n  let assert B(x) = B(5)\n  let assert C(a: a, b: b) = C(a: 5, b: 5.5e5)\n  let assert C(a: a, b: b) = C(a: 5, b: 5.5e5)\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

pub type Test {
  A
  B(Int)
  C(a: Int, b: Float)
}

pub type Simple {
  Simple
}
pub type Simple2 {
  Simple2(Int)
}
pub type Simple3 {
  Simple3(inherit: Bool, x: Float)
}

pub fn pat_test() {
  let Nil = Nil
  let x = Simple
  let Simple = x
  let Simple = Simple
  let _ = Simple2(5)
  let _ignored = Simple2(5)
  let Simple2(a) = Simple2(5)
  let Simple3(a, b) = Simple3(True, 5.0)

  #(a, b)
}

pub fn pat_assert_test() {
  let assert True = True
  let assert False = True
  let assert A = A
  let assert B(x) = B(5)
  let assert C(a: a, b: b) = C(a: 5, b: 5.5e5)
  let assert C(a: a, b: b) = C(a: 5, b: 5.5e5)
}


----- COMPILED NIX
let
  inherit (builtins.import ./../gleam.nix) makeError seqAll;
  
  A = { __gleamTag = "A"; };
  
  B = x0: { __gleamTag = "B"; _0 = x0; };
  
  C = a: b: { __gleamTag = "C"; inherit a b; };
  
  Simple = { __gleamTag = "Simple"; };
  
  Simple2 = x0: { __gleamTag = "Simple2"; _0 = x0; };
  
  Simple3 =
    inherit': x: { __gleamTag = "Simple3"; inherit x; "inherit" = inherit'; };
  
  pat_test =
    { }:
    let
      _pat' = null;
      _' = _pat';
      x = Simple;
      _'1 = x;
      _pat''1 = Simple;
      _'2 = _pat''1;
      _pat''2 = (Simple2 5);
      _'3 = _pat''2;
      _pat''3 = (Simple2 5);
      _'4 = _pat''3;
      _pat''4 = (Simple2 5);
      a = _pat''4._0;
      _pat''5 = (Simple3 true 5.0);
      a'1 = _pat''5."inherit";
      b = _pat''5.x;
    in
    seqAll [ _' _'1 _'2 _'3 _'4 ] [ a'1 b ];
  
  pat_assert_test =
    { }:
    let
      _pat' = true;
      _assert' =
        if !_pat' then
          builtins.throw
            (makeError
              "let_assert"
              "my/mod"
              32
              "pat_assert_test"
              "Pattern match failed, no pattern matched the value."
              { value = _pat'; })
        else null;
      _' = builtins.seq _assert' _pat';
      _pat''1 = true;
      _assert''1 =
        if _pat''1 then
          builtins.throw
            (makeError
              "let_assert"
              "my/mod"
              33
              "pat_assert_test"
              "Pattern match failed, no pattern matched the value."
              { value = _pat''1; })
        else null;
      _'1 = builtins.seq _assert''1 _pat''1;
      _pat''2 = A;
      _assert''2 =
        if _pat''2.__gleamTag != "A" then
          builtins.throw
            (makeError
              "let_assert"
              "my/mod"
              34
              "pat_assert_test"
              "Pattern match failed, no pattern matched the value."
              { value = _pat''2; })
        else null;
      _'2 = builtins.seq _assert''2 _pat''2;
      _pat''3 = (B 5);
      _assert''3 =
        if _pat''3.__gleamTag != "B" then
          builtins.throw
            (makeError
              "let_assert"
              "my/mod"
              35
              "pat_assert_test"
              "Pattern match failed, no pattern matched the value."
              { value = _pat''3; })
        else null;
      x = builtins.seq _assert''3 _pat''3._0;
      _pat''4 = (C 5 5.5e5);
      _assert''4 =
        if _pat''4.__gleamTag != "C" then
          builtins.throw
            (makeError
              "let_assert"
              "my/mod"
              36
              "pat_assert_test"
              "Pattern match failed, no pattern matched the value."
              { value = _pat''4; })
        else null;
      a = builtins.seq _assert''4 _pat''4.a;
      b = builtins.seq _assert''4 _pat''4.b;
    in
    seqAll
      [ _' _assert' _'1 _assert''1 _'2 _assert''2 _assert''3 _assert''4 ]
      (let
        _pat''5 = (C 5 5.5e5);
      in
      if _pat''5.__gleamTag != "C" then
        builtins.throw
          (makeError
            "let_assert"
            "my/mod"
            37
            "pat_assert_test"
            "Pattern match failed, no pattern matched the value."
            { value = _pat''5; })
      else _pat''5);
in
{ inherit A B C Simple Simple2 Simple3 pat_test pat_assert_test; }
