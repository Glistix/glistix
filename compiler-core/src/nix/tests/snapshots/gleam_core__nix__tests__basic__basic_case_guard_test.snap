---
source: compiler-core/src/nix/tests/basic.rs
expression: "\nimport mymod\n\ntype BigBad {\n  BigBad(a: Result(Int, Result(Int, Int)), b: Int)\n}\n\npub const inherit = 5\n\npub const bad = [Ok(5), Ok(6)]\n\nconst bigbad = [BigBad(Error(Ok(5)), 10), BigBad(Error(Ok(5)), 10)]\n\npub type Bad {\n  Bad(inherit: Bool)\n}\n\npub fn guard(x) {\n  let b = Bad(inherit: True)\n  case x {\n    Nil if mymod.inherit -> 1\n    Nil if b.inherit -> 2\n    Nil if Bad(inherit: True) == Bad(inherit: False) -> 3\n    Nil if BigBad(Error(Ok(5)), 10) == BigBad(Error(Ok(5)), 10) -> 4\n    Nil if 5 > 6 -> 5\n    Nil if [Ok(5), Ok(6)] == [Ok(7)] -> 6\n    _ -> 7\n  }\n}\n"
---
let
  inherit (builtins.import ./../gleam.nix) Ok Error;
  mod''mymod = builtins.import ./../mymod.nix;
  
  BigBad = a: b: { __gleam_tag' = "BigBad"; inherit a b; };
  
  Bad = inherit': { __gleam_tag' = "Bad"; inherit inherit'; };
  
  guard =
    x:
      let
        b = Bad true;
      in
        if x == null && (mod''mymod.inherit')
        then 1
        else if x == null && (b.inherit')
        then 2
        else if x == null && ((Bad true) == (Bad false))
        then 3
        else if
          x == null &&
          ((BigBad
          (Error
          (Ok
          5))
          10) == (BigBad
          (Error
          (Ok
          5))
          10))
        then 4
        else if x == null && (5 > 6)
        then 5
        else if x == null && ([ (Ok 5) (Ok 6) ] == [ (Ok 7) ])
        then 6
        else 7;
  
  inherit' = 5;
  
  bad = [ (Ok 5) (Ok 6) ];
  
  bigbad = [ (BigBad (Error (Ok 5)) 10) (BigBad (Error (Ok 5)) 10) ];
in { inherit Bad guard inherit' bad; }
