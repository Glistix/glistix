---
source: compiler-core/src/nix/tests/assignments.rs
expression: "\ntype Wibble {\n  Wibble(wibble: String)\n}\n\npub fn main() {\n  let assert Wibble(wibble: \"w\" as prefix <> rest) = Wibble(\"wibble\")\n  prefix <> rest\n}\n"
---
----- SOURCE CODE

type Wibble {
  Wibble(wibble: String)
}

pub fn main() {
  let assert Wibble(wibble: "w" as prefix <> rest) = Wibble("wibble")
  prefix <> rest
}


----- COMPILED NIX
let
  inherit (builtins.import ./../gleam.nix) strHasPrefix makeError;
  
  Wibble = wibble: { __gleamTag = "Wibble"; inherit wibble; };
  
  main =
    { }:
    let
      _pat' = (Wibble "wibble");
      _assert' =
        if _pat'.__gleamTag != "Wibble" || !(strHasPrefix "w" _pat'.wibble) then
          builtins.throw
            (makeError
              "let_assert"
              "my/mod"
              7
              "main"
              "Pattern match failed, no pattern matched the value."
              { value = _pat'; })
        else null;
      rest = builtins.seq _assert' (builtins.substring 1 (-1) _pat'.wibble);
      prefix = builtins.seq _assert' "w";
    in
    builtins.seq _assert' (prefix + rest);
in
{ inherit main; }
