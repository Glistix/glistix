---
source: compiler-core/src/nix/tests/custom_types.rs
expression: "\ntype Cat {\n  Cat(name: String, cuteness: Int)\n}\n\ntype Box {\n  Box(occupant: Cat)\n}\n\nconst felix = Cat(\"Felix\", 12)\nconst tom = Cat(cuteness: 1, name: \"Tom\")\n\nfn go() {\n  Cat(\"Nubi\", 1)\n  Cat(2, name: \"Nubi\")\n  Cat(cuteness: 3, name: \"Nubi\")\n}\n\nfn update(cat) {\n  Cat(..cat, name: \"Sid\")\n  Cat(..cat, name: \"Bartholemew Wonder Puss the Fourth !!!!!!!!!!!!!!!!\")\n  Cat(..new_cat(), name: \"Molly\")\n  let box = Box(occupant: cat)\n  Cat(..box.occupant, cuteness: box.occupant.cuteness + 1)\n}\n\nfn access(cat: Cat) {\n  cat.cuteness\n}\n\nfn new_cat() {\n  Cat(name: \"Beau\", cuteness: 11)\n}\n"
---
let
  inherit (builtins.import ./../gleam.nix) seqAll;
  
  Cat = name: cuteness: { __gleamTag = "Cat"; inherit name cuteness; };
  
  Box = occupant: { __gleamTag = "Box"; inherit occupant; };
  
  go =
    {}:
      let
        _' = Cat "Nubi" 1;
        _'1 = Cat "Nubi" 2;
      in seqAll [ _' _'1 ] (Cat "Nubi" 3);
  
  access = cat: cat.cuteness;
  
  new_cat = {}: Cat "Beau" 11;
  
  update =
    cat:
      let
        _' = cat // { name = "Sid"; };
        _'1 =
          cat // {
            name = "Bartholemew Wonder Puss the Fourth !!!!!!!!!!!!!!!!";
          };
        _'2 = (new_cat {}) // { name = "Molly"; };
        box = Box cat;
      in
      seqAll
        [ _' _'1 _'2 ]
        (box.occupant // { cuteness = (box.occupant.cuteness + 1); });
  
  felix = Cat "Felix" 12;
  
  tom = Cat "Tom" 1;
in {}
