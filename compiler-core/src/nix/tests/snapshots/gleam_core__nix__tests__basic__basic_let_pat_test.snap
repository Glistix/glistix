---
source: compiler-core/src/nix/tests/basic.rs
expression: "\npub type Test {\n  A\n  B(Int)\n  C(a: Int, b: Float)\n}\n\npub type Simple {\n  Simple\n}\npub type Simple2 {\n  Simple2(Int)\n}\npub type Simple3 {\n  Simple3(inherit: Bool, x: Float)\n}\n\npub fn pat_test() {\n  let Nil = Nil\n  let x = Simple\n  let Simple = x\n  let Simple = Simple\n  let _ = Simple2(5)\n  let _ignored = Simple2(5)\n  let Simple2(a) = Simple2(5)\n  let Simple3(a, b) = Simple3(True, 5.0)\n\n  #(a, b)\n}\n\npub fn pat_assert_test() {\n  let assert True = True\n  let assert False = True\n  let assert A = A\n  let assert B(x) = B(5)\n  let assert C(a: a, b: b) = C(a: 5, b: 5.5e5)\n  let assert C(a: a, b: b) = C(a: 5, b: 5.5e5)\n}\n"
---
let
  A = { __gleam_tag' = "A"; };
  
  B = x0: { __gleam_tag' = "B"; _0 = x0; };
  
  C = a: b: { __gleam_tag' = "C"; inherit a b; };
  
  Simple = { __gleam_tag' = "Simple"; };
  
  Simple2 = x0: { __gleam_tag' = "Simple2"; _0 = x0; };
  
  Simple3 = inherit': x: { __gleam_tag' = "Simple3"; inherit inherit' x; };
  
  pat_test =
    let
      
      x = Simple;
      
      
      
      
      _pat''4 = (Simple2 5);
      a = _pat''4._0;
      _pat''5 = (Simple3 true 5.0);
      a'1 = _pat''5.inherit';
      b = _pat''5.x;
    in { _0 = a'1; _1 = b; };
  
  pat_assert_test =
    let
      
      
      
      _pat''3 = (B 5);
      _assert' =
        if _pat''3.__gleam_tag' != "B"
        then builtins.throw "Assignment pattern did not match"
        else null;
      x = builtins.seq _assert' _pat''3._0;
      _pat''4 = (C 5 5.5e5);
      _assert''1 =
        if _pat''4.__gleam_tag' != "C"
        then builtins.throw "Assignment pattern did not match"
        else null;
      a = builtins.seq _assert''1 _pat''4.a;
      b = builtins.seq _assert''1 _pat''4.b;
    in
      let
        _pat''5 = (C 5 5.5e5);
      in
        if _pat''5.__gleam_tag' != "C"
        then builtins.throw "Assignment pattern did not match"
        else _pat''5;
in { inherit A B C Simple Simple2 Simple3 pat_test pat_assert_test; }
