---
source: compiler-core/src/nix/tests/lists.rs
expression: "\nfn go(x, y) {\n  let assert [] = x\n  let assert [a] = x\n  let assert [1, 2] = x\n  let assert [_, #(3, b)] = y\n  let assert [head, ..tail] = y\n}\n"
snapshot_kind: text
---
----- SOURCE CODE

fn go(x, y) {
  let assert [] = x
  let assert [a] = x
  let assert [1, 2] = x
  let assert [_, #(3, b)] = y
  let assert [head, ..tail] = y
}


----- COMPILED NIX
let
  inherit
    (builtins.import ./../gleam.nix)
    listHasAtLeastLength
    listHasLength
    makeError
    seqAll
    ;
  
  go =
    x: y:
    let
      _assert' =
        if !(listHasLength x 0) then
          builtins.throw
            (makeError
              "let_assert"
              "my/mod"
              3
              "go"
              "Pattern match failed, no pattern matched the value."
              { value = x; })
        else null;
      _' = builtins.seq _assert' x;
      _assert''1 =
        if !(listHasLength x 1) then
          builtins.throw
            (makeError
              "let_assert"
              "my/mod"
              4
              "go"
              "Pattern match failed, no pattern matched the value."
              { value = x; })
        else null;
      a = builtins.seq _assert''1 x.head;
      _assert''2 =
        if !(listHasLength x 2) || x.head != 1 || x.tail.head != 2 then
          builtins.throw
            (makeError
              "let_assert"
              "my/mod"
              5
              "go"
              "Pattern match failed, no pattern matched the value."
              { value = x; })
        else null;
      _'1 = builtins.seq _assert''2 x;
      _assert''3 =
        if !(listHasLength y 2) || (builtins.elemAt y.tail.head 0) != 3 then
          builtins.throw
            (makeError
              "let_assert"
              "my/mod"
              6
              "go"
              "Pattern match failed, no pattern matched the value."
              { value = y; })
        else null;
      b = builtins.seq _assert''3 (builtins.elemAt y.tail.head 1);
    in
    seqAll
      [ _' _assert' _assert''1 _'1 _assert''2 _assert''3 ]
      (if !(listHasAtLeastLength y 1) then
        builtins.throw
          (makeError
            "let_assert"
            "my/mod"
            7
            "go"
            "Pattern match failed, no pattern matched the value."
            { value = y; })
      else y);
in
{ }
