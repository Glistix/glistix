---
source: compiler-core/src/nix/tests/case.rs
expression: "\ntype Wibble {\n  Wibble(Wobble)\n}\ntype Wobble {\n  Wobble(wabble: Wabble)\n}\ntype Wabble {\n  Wabble(tuple: #(Int, String))\n}\n\npub fn main() {\n  let tmp = Wibble(Wobble(Wabble(#(42, \"wibble\"))))\n  case tmp {\n    Wibble(Wobble(Wabble(#(_int, \"w\" as wibble <> rest)))) -> wibble <> rest\n    _ -> panic\n  }\n}\n"
---
----- SOURCE CODE

type Wibble {
  Wibble(Wobble)
}
type Wobble {
  Wobble(wabble: Wabble)
}
type Wabble {
  Wabble(tuple: #(Int, String))
}

pub fn main() {
  let tmp = Wibble(Wobble(Wabble(#(42, "wibble"))))
  case tmp {
    Wibble(Wobble(Wabble(#(_int, "w" as wibble <> rest)))) -> wibble <> rest
    _ -> panic
  }
}


----- COMPILED NIX
let
  inherit (builtins.import ./../gleam.nix) strHasPrefix makeError;
  
  Wibble = x0: { __gleamTag = "Wibble"; _0 = x0; };
  
  Wobble = wabble: { __gleamTag = "Wobble"; inherit wabble; };
  
  Wabble = tuple: { __gleamTag = "Wabble"; inherit tuple; };
  
  main =
    { }:
    let
      tmp = Wibble (Wobble (Wabble [ 42 "wibble" ]));
    in
    if
      tmp.__gleamTag == "Wibble" &&
      tmp._0.__gleamTag == "Wobble" &&
      tmp._0.wabble.__gleamTag == "Wabble" &&
      strHasPrefix "w" (builtins.elemAt tmp._0.wabble.tuple 1)
    then
      let
        rest =
          (builtins.substring 1 (-1) (builtins.elemAt tmp._0.wabble.tuple 1));
        wibble = "w";
      in
      wibble + rest
    else
      builtins.throw
        (makeError
          "panic"
          "my/mod"
          16
          "main"
          "`panic` expression evaluated."
          { });
in
{ inherit main; }
