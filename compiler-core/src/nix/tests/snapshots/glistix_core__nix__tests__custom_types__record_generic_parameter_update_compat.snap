---
source: compiler-core/src/nix/tests/custom_types.rs
expression: "\ntype Box(value) {\n    Box(password: String, value: value, value2: value)\n}\nfn insert(box: Box(a), value: b) -> Box(b) {\n    Box(..box, value:, value2: value)\n}\nfn replace_string_with_int() {\n  let box: Box(String) = Box(password: \"A\", value: \"B\", value2: \"E\")\n  #(box, insert(box, 10))\n}"
---
----- SOURCE CODE

type Box(value) {
    Box(password: String, value: value, value2: value)
}
fn insert(box: Box(a), value: b) -> Box(b) {
    Box(..box, value:, value2: value)
}
fn replace_string_with_int() {
  let box: Box(String) = Box(password: "A", value: "B", value2: "E")
  #(box, insert(box, 10))
}

----- COMPILED NIX
let
  Box =
    password: value: value2:
      { __gleamTag = "Box"; inherit password value value2; };
  
  insert = box: value: box // { value = value; value2 = value; };
  
  replace_string_with_int =
    { }: let box = Box "A" "B" "E"; in [ box (insert box 10) ];
in
{ }
