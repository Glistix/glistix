---
source: compiler-core/src/nix/tests/strings.rs
expression: "\npub fn go(x) {\n  case \"Î˜ foo bar\" {\n    \"Î˜\" <> rest -> rest\n    _ -> \"\"\n  }\n  case \"ğŸ«¥ is neutral dotted\" {\n    \"ğŸ«¥\" <> rest -> rest\n    _ -> \"\"\n  }\n  case \"ğŸ‡ºğŸ‡¸ is a cluster\" {\n    \"ğŸ‡ºğŸ‡¸\" <> rest -> rest\n    _ -> \"\"\n  }\n  case \"\\\" is a an escaped quote\" {\n    \"\\\"\" <> rest -> rest\n    _ -> \"\"\n  }\n  case \"\\\\ is a an escaped backslash\" {\n    \"\\\\\" <> rest -> rest\n    _ -> \"\"\n  }\n}\n"
---
let
  inherit (builtins.import ./../gleam.nix) strHasPrefix seqAll;
  
  go =
    x:
    let
      _' =
        let
          _pat' = "Î˜ foo bar";
        in
        if strHasPrefix "Î˜" _pat' then
          let
            rest = (builtins.substring 2 (-1) _pat');
          in rest
        else "";
      _'1 =
        let
          _pat''1 = "ğŸ«¥ is neutral dotted";
        in
        if strHasPrefix "ğŸ«¥" _pat''1 then
          let
            rest = (builtins.substring 4 (-1) _pat''1);
          in rest
        else "";
      _'2 =
        let
          _pat''2 = "ğŸ‡ºğŸ‡¸ is a cluster";
        in
        if strHasPrefix "ğŸ‡ºğŸ‡¸" _pat''2 then
          let
            rest = (builtins.substring 8 (-1) _pat''2);
          in rest
        else "";
      _'3 =
        let
          _pat''3 = "\" is a an escaped quote";
        in
        if strHasPrefix "\"" _pat''3 then
          let
            rest = (builtins.substring 1 (-1) _pat''3);
          in rest
        else "";
    in
    seqAll
      [ _' _'1 _'2 _'3 ]
      (let
        _pat''4 = "\\ is a an escaped backslash";
      in
      if strHasPrefix "\\" _pat''4 then
        let
          rest = (builtins.substring 1 (-1) _pat''4);
        in rest
      else "");
in { inherit go; }
