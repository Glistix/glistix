---
source: compiler-core/src/nix/tests/case.rs
expression: "\ntype Wibble {\n  Wibble(wobble: String)\n}\n\npub fn main() {\n  let tmp = Wibble(wobble: \"wibble\")\n  case tmp {\n    Wibble(wobble: \"w\" as wibble <> rest) -> wibble <> rest\n    _ -> panic\n  }\n}\n"
---
----- SOURCE CODE

type Wibble {
  Wibble(wobble: String)
}

pub fn main() {
  let tmp = Wibble(wobble: "wibble")
  case tmp {
    Wibble(wobble: "w" as wibble <> rest) -> wibble <> rest
    _ -> panic
  }
}


----- COMPILED NIX
let
  inherit (builtins.import ./../gleam.nix) strHasPrefix makeError;
  
  Wibble = wobble: { __gleamTag = "Wibble"; inherit wobble; };
  
  main =
    { }:
    let
      tmp = Wibble "wibble";
    in
    if tmp.__gleamTag == "Wibble" && strHasPrefix "w" tmp.wobble then
      let
        rest = (builtins.substring 1 (-1) tmp.wobble);
        wibble = "w";
      in
      wibble + rest
    else
      builtins.throw
        (makeError
          "panic"
          "my/mod"
          10
          "main"
          "`panic` expression evaluated."
          { });
in
{ inherit main; }
