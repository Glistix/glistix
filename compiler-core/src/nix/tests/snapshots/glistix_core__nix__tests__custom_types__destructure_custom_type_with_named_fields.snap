---
source: compiler-core/src/nix/tests/custom_types.rs
expression: "\ntype Cat {\n  Cat(name: String, cuteness: Int)\n}\n\nfn go(cat) {\n  let Cat(x, y) = cat\n  let Cat(name: x, ..) = cat\n  let assert Cat(cuteness: 4, name: x) = cat\n  x\n}\n\n"
snapshot_kind: text
---
----- SOURCE CODE

type Cat {
  Cat(name: String, cuteness: Int)
}

fn go(cat) {
  let Cat(x, y) = cat
  let Cat(name: x, ..) = cat
  let assert Cat(cuteness: 4, name: x) = cat
  x
}



----- COMPILED NIX
let
  inherit (builtins.import ./../gleam.nix) makeError;
  
  Cat = name: cuteness: { __gleamTag = "Cat"; inherit name cuteness; };
  
  go =
    cat:
    let
      x = cat.name;
      y = cat.cuteness;
      x'1 = cat.name;
      _assert' =
        if cat.__gleamTag != "Cat" || cat.cuteness != 4 then
          builtins.throw
            (makeError
              "let_assert"
              "my/mod"
              9
              "go"
              "Pattern match failed, no pattern matched the value."
              { value = cat; })
        else null;
      x'2 = builtins.seq _assert' cat.name;
    in
    builtins.seq _assert' x'2;
in
{ }
