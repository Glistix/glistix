---
source: compiler-core/src/nix/tests/basic.rs
expression: "\nfn condman(a, b) {\n  let p1 = case a > b {\n    True -> 5\n    False -> 6\n  }\n\n  let p2 = case a > b {\n    True -> 5\n    _ -> 6\n  }\n\n  let p3 = case a > b {\n    False -> 6\n    True -> 5\n  }\n\n  let p4 = case a > b {\n    False -> 6\n    _ -> 5\n  }\n\n  let v1 = True\n  let v2 = False\n  let vv1 = case v1 { _ -> 10 }\n  let vv2 = case v2 { True -> 50 _ -> 10 }\n  let vv3 = case True { True -> 50 _ -> 10 }\n\n  #(p1, p2, p3, p4, vv1, vv2, vv3)\n}\n\npub fn fact(n: Int) -> #(Nil, Int) {\n  let res = case n < 0 {\n    True -> panic as \"Don't.\"\n    False -> Nil\n  }\n  #(res, case n {\n    0 -> 1\n    _ -> n * fact(n - 1).1\n  })\n}\n"
---
let
  inherit (builtins.import ./../gleam.nix) makeError;
  
  condman =
    a: b:
      let
        p1 = let _pat' = a > b; in if _pat' then 5 else 6;
        p2 = let _pat''1 = a > b; in if _pat''1 then 5 else 6;
        p3 = let _pat''2 = a > b; in if !_pat''2 then 6 else 5;
        p4 = let _pat''3 = a > b; in if !_pat''3 then 6 else 5;
        v1 = true;
        v2 = false;
        vv1 = 10;
        vv2 = if v2 then 50 else 10;
        vv3 = let _pat''4 = true; in if _pat''4 then 50 else 10;
      in [ p1 p2 p3 p4 vv1 vv2 vv3 ];
  
  fact =
    n:
      let
        res =
          let
            _pat' = n < 0;
          in
            if _pat'
            then
              builtins.throw (makeError "panic" "my/mod" 34 "fact" "Don't." {})
            else null;
      in [ res (if n == 0 then 1 else n * (builtins.elemAt (fact (n - 1)) 1)) ];
in { inherit fact; }
